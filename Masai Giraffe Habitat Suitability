//////////////////////////////////////////////////////////////////////////////////////
// Authors: Muthiuru Amos Chege, Ramiro D. Crego, Jemimah A. Simbauni, Philip M. Muruthi,
//Grace Waiguchu, Fredrick Lala, James D.A. Millington, Eunice W. Kairu

// Project: Model Maasai Giraffe Habitat Suitability index and landscape connectivity using Aerial survey data
// November 2022

/////////////////////////////////

// load presence data

var Data = Giraffes2021;

// Print presence data
print('Original data size:', Data.size());

// Define spatial resolution to work with (m)
var GrainSize = 250;

//Remove duplicates per pixel

function RemoveDuplicates(data){
  var randomraster = ee.Image.random().reproject('EPSG:4326', null, GrainSize);
  var randpointvals = randomraster.sampleRegions({collection:ee.FeatureCollection(data), scale: 10, geometries: true});
  return randpointvals.distinct('random');
}

var Data = RemoveDuplicates(Data);
print('Final data size:', Data.size());

// Load region boundary 
 
var AOI = StudyArea2
//ee.FeatureCollection(StudyArea).geometry();
// Add border of study area to the map
var outline = ee.Image().byte().paint({
  featureCollection: AOI, color: 1, width: 3});
Map.centerObject(AOI);
Map.addLayer(outline, {}, 'StudyArea', 1);


Data = Data.filterBounds(AOI);

// Visualize Giraffe presence data
Map.addLayer(Data, {color: 'red'}, 'presence',1);


//Select and load predictor variables

//Load Rainfall data 

// var Climate = ee.ImageCollection("ECMWF/ERA5/MONTHLY")
// .filterDate('2010-01-01', '2021-12-31')
// //.first()
// .select('total_precipitation')
// .mean()
// .clip(AOI);

// Map.addLayer(Climate, {color: 'black'}, 'Rainfall',1);


//Add CHIRPS ddata on rainfall
var rain =ee.ImageCollection("UCSB-CHG/CHIRPS/PENTAD")
.filterDate('2015-01-01', '2021-12-31')
//.first()
.select('precipitation')
.mean()
.clip(AOI);

var precipitationVis = {
  min: 0,
  max: 112,
  palette: ['001137', '0aab1e', 'e7eb05', 'ff4a2d', 'e90000'],
};
//Map.addLayer(rain, precipitationVis, 'Precipitation');


// Export.image.toDrive({
// image: (rain),
// description: 'Rainfall',
// scale: 30,
// maxPixels: 1e10,
// region: AOI});


//Add terrain algorithms
var Terrain = ee.Algorithms.Terrain(ee.Image("USGS/SRTMGL1_003"));

//Load surface roughness
var SR = Terrain.select('elevation').reduceNeighborhood({
  reducer: ee.Reducer.stdDev(), 
  kernel: ee.Kernel.circle({radius: 10, units: 'pixels'}),
  skipMasked:true
}).rename('SR')
.clip(AOI);

// Export.image.toDrive({
// image:SR,
// description: 'SR',
// scale: 30, 
// region: AOI});


//Map.addLayer(SR, {color: 'black'}, 'SR',1);

//Load NDVI 
var MODIS = ee.ImageCollection("MODIS/061/MOD13Q1") 
  .filterDate('2020-01-01', '2021-12-31')
  .select('EVI')
  .mean()
  .clip(AOI);
print(MODIS, 'MODIScollection');
//Map.addLayer(MODIS, {color: 'green'}, 'NDVI',1);

// Export.image.toDrive({
// image: (MODIS),
// description: 'EVI',
// scale: GrainSize,
// //maxPixels: 1e10,
// region: AOI});

 //Load woody vegetation from ALOS_PALSAR 
 
var sarHV = ee.ImageCollection("JAXA/ALOS/PALSAR/YEARLY/SAR_EPOCH")
                  .filter(ee.Filter.calendarRange(2021,null,'year'))
                      .select('HH', 'HV').first()
                  .clip(AOI);
//print(sarHV) ;   

// Export.image.toDrive({
// image: (sarHV),
// description: 'Woody Vegetation',
// scale: GrainSize,
// maxPixels: 1e10,
// region: AOI});

//Map.addLayer(sarHV, {color: 'green'}, 'woodyVegetation',1);

//Load Global Human Modification

var gHM = ee.ImageCollection('CSP/HM/GlobalHumanModification')
.first()
.select('gHM')
.clip(AOI);

//Map.addLayer(gHM, {color: 'true color'}, 'human modification', 1);

// Export.image.toDrive({
//   image: (gHM),
//   description: 'Human modification',
// scale: GrainSize,
//   maxPixels: 1e10,
// region: AOI});


// Combine bands into a single multi-band image
var predictors = Terrain.addBands(SR).addBands(MODIS).addBands(gHM).addBands(sarHV).addBands(rain);
print(predictors);

// Mask out ocean pixels from the predictor variable image
var watermask =  Terrain.select('elevation').gt(0); //Create a water mask
var predictors = predictors.updateMask(watermask).clip(AOI);

// Select subset of bands to keep for habitat suitability modeling
var bands = ['elevation','SR','EVI','gHM','HH','HV','precipitation'];
var predictors = predictors.select(bands);

// Display layers on the map
//Map.addLayer(predictors, {bands:['elevation'], min: 0, max: 5000,  palette: ['000000','006600', '009900','33CC00','996600','CC9900','CC9966','FFFFFF',]}, 'Elevation (m)', 0);
//Map.addLayer(predictors, {bands:['SR'], min: 0, max: 5000,  palette: ['000000','006600', '009900','33CC00','996600','CC9900','CC9966','FFFFFF',]}, 'Elevation (m)', 0);

// Estimate correlation among predictor variables

// Extract local covariate values from multiband predictor image at 10000 random points
var DataCor = predictors.sample({scale: GrainSize, numPixels: 10000, geometries: true}); //Generate 10000 random points
var PixelVals = predictors.sampleRegions({collection: DataCor, scale: GrainSize, tileScale: 16}); //Extract covariate values

// To check all pairwise correlations we need to map the reduceColumns function across all pairwise combinations of predictors
var CorrAll = predictors.bandNames().map(function(i){
    var tmp1 = predictors.bandNames().map(function(j){
      var tmp2 = PixelVals.reduceColumns({
        reducer: ee.Reducer.spearmansCorrelation(),
        selectors: [i, j]
      });
    return tmp2.get('correlation');
    });
    return tmp1;
  });
//print('Variables correlation matrix',CorrAll);

//Export correlation matrix to Google Drive

// Export.table.toDrive({
//   collection: ee.FeatureCollection(CorrAll
//                         .map(function(element){
//                         return ee.Feature(null,{CorrAll:element})})),
//   description: 'CorMatrix',
//   fileFormat: 'CSV',
// });


//Defining area for pseudo-absences and spatial blocks for model fitting and cross validation
// Make an image out of the presence locations. The pixels where we have presence locations will be removed from the area to generate pseudo-absences.
// This will prevent having presence and pseudo-absences in the same pixel. 
var mask = Data
  .reduceToImage({
    properties: ['random'],
    reducer: ee.Reducer.first()
}).reproject('EPSG:4326', null, ee.Number(GrainSize)).mask().neq(1).selfMask();

// Simple random pseudo-absence selection across the entire area of interest.
var AreaForPA = mask.updateMask(watermask).clip(AOI);

// Display area for creation of pseudo-absence
//Map.addLayer(AreaForPA, {palette: 'black'},'Area to create pseudo-absences', 1);

//Define a function to create a grid over AOI
function makeGrid (geometry, scale) {
var lonLat = ee.Image.pixelLonLat();
var lonGrid = lonLat
   .select('longitude')
    .multiply(5000)
   .toInt();
  var latGrid = lonLat
   .select('latitude')
    .multiply(5000)
    .toInt();
return lonGrid
  .multiply(latGrid)
  .reduceToVectors({
     geometry: geometry.buffer({distance:1000,maxError:1}), //The buffer allows you to make sure the grid includes the borders of the AOI.
     scale: scale,
      geometryType: 'polygon',    });}
  
// Create grid and remove cells outside AOI
var Scale = 5000; // Set range in m to create spatial blocks
var grid = makeGrid(AOI, Scale);
var Grid = watermask.reduceRegions({collection: grid, reducer: ee.Reducer.mean()}).filter(ee.Filter.neq('mean',null));
Map.addLayer(Grid, {},'Grid for spatial block cross validation', 1);

// Define SDM function
// Note that other algorithms are available in GEE. See ee.Classifiers on the documentation for more information.

function SDM(x) {
    var Seed = ee.Number(x);
    
// Randomly split blocks for training and validation
    var GRID = ee.FeatureCollection(Grid).randomColumn({seed:Seed}).sort('random');
    var TrainingGrid = GRID.filter(ee.Filter.lt('random', split));  // Filter points with 'random' property < split percentage
    var TestingGrid = GRID.filter(ee.Filter.gte('random', split));  // Filter points with 'random' property >= split percentage
// Presence
    var PresencePoints = ee.FeatureCollection(Data);
    PresencePoints = PresencePoints.map(function(feature){return feature.set('PresAbs', 1)});
    var TrPresencePoints = PresencePoints.filter(ee.Filter.bounds(TrainingGrid));  // Filter presence points for training 
    var TePresencePoints = PresencePoints.filter(ee.Filter.bounds(TestingGrid));  // Filter presence points for testing
    
    // Pseudo-absences
    var TrPseudoAbsPoints = AreaForPA.sample({region: TrainingGrid, scale: GrainSize, numPixels: TrPresencePoints.size().add(100), seed:Seed, geometries: true}); // We add extra points to account for those points that land in masked areas of the raster and are discarded. This ensures a balanced presence/pseudo-absence data set
    TrPseudoAbsPoints = TrPseudoAbsPoints.randomColumn().sort('random').limit(ee.Number(TrPresencePoints.size())); //Randomly retain the same number of pseudo-absences as presence data 
    TrPseudoAbsPoints = TrPseudoAbsPoints.map(function(feature){
        return feature.set('PresAbs', 0);
        });
    
    var TePseudoAbsPoints = AreaForPA.sample({region: TestingGrid, scale: GrainSize, numPixels: TePresencePoints.size().add(100), seed:Seed, geometries: true}); // We add extra points to account for those points that land in masked areas of the raster and are discarded. This ensures a balanced presence/pseudo-absence data set
    TePseudoAbsPoints = TePseudoAbsPoints.randomColumn().sort('random').limit(ee.Number(TePresencePoints.size())); //Randomly retain the same number of pseudo-absences as presence data 
    TePseudoAbsPoints = TePseudoAbsPoints.map(function(feature){
        return feature.set('PresAbs', 0);
        });

    // Merge presence and pseudo-absencepoints
    var trainingPartition = TrPresencePoints.merge(TrPseudoAbsPoints);
    var testingPartition = TePresencePoints.merge(TePseudoAbsPoints);

    // Extract local covariate values from multiband predictor image at training points
    var trainPixelVals = predictors.sampleRegions({collection: trainingPartition, properties: ['PresAbs'], 
    scale: GrainSize, tileScale: 16, geometries: true});

    // Classify using random forest
    var Classifier = ee.Classifier.smileRandomForest({
      numberOfTrees: 500, //The number of decision trees to create.
       variablesPerSplit: null, //The number of variables per split. If unspecified, uses the square root of the number of variables.
      minLeafPopulation: 10,//Only create nodes whose training set contains at least this many points. Integer, default: 1
       bagFraction: 0.5,//The fraction of input to bag per tree. Default: 0.5.
     maxNodes: null,//The maximum number of leaf nodes in each tree. If unspecified, defaults to no limit.
       seed: Seed//The randomization seed.
      });
    
    // Presence probability 
    var ClassifierPr = Classifier.setOutputMode('PROBABILITY').train(trainPixelVals, 'PresAbs', bands); 
    var ClassifiedImgPr = predictors.select(bands).classify(ClassifierPr);
    
    // Binary presence/absence map
    var ClassifierBin = Classifier.setOutputMode('CLASSIFICATION').train(trainPixelVals, 'PresAbs', bands); 
    var ClassifiedImgBin = predictors.select(bands).classify(ClassifierBin);
   
    // Variable importance
    var variable_importance = ee.Feature(null, ee.Dictionary(ClassifierPr.explain()).get('importance'));
    
    return ee.List([ClassifiedImgPr, ClassifiedImgBin, variable_importance, testingPartition]);
}


// Define partition for training and testing data
var split = 0.70;  // // The proportion of the blocks used to select training data

// Define number of repetitions
var numiter = 10;
// Fit SDM 

// While the runif function can be used to generate random seeds,
//we map the SDM function over random created numbers for reproducibility of results
var results = ee.List([12,198,281,155,701,399,341,844,903,900]).map(SDM);

// Extract results from list
var results = results.flatten();
print(results);

// Section 6 - Extracting and displaying model prediction results
///////////////////////////////////////////////////////////////////

// Habitat suitability

// Set visualization parameters
var visParams = {
  min: 0,
  max: 1,
  palette: ["#440154FF","#482677FF","#404788FF","#33638DFF","#287D8EFF",
  "#1F968BFF","#29AF7FFF","#55C667FF","#95D840FF","#DCE319FF"],
};

// Extract all model predictions
var images = ee.List.sequence(0,ee.Number(numiter).multiply(4).subtract(1),4).map(function(x){
  return results.get(x)});

// Calculate mean of all individual model runs
var ModelAverage = ee.ImageCollection.fromImages(images).mean();
// Calculate Standard deviations of all the models
var ModelSD = ee.ImageCollection.fromImages(images).reduce(ee.Reducer.stdDev());


//Map.addLayer(ModelSD, visParams, 'Habitat Suitability SD');

// Add final habitat suitability layer and presence locations to the map
Map.addLayer(ModelAverage, visParams, 'Habitat Suitability');
//Map.addLayer(Data, {color:'red'}, 'Presence', 0);

// Extract all model predictions
var images2 = ee.List.sequence(1,ee.Number(numiter).multiply(4).subtract(1),4).map(function(x){
  return results.get(x)});

//Calculate the Standard deviations of all images
// Add individual models to the map.

// Map.addLayer(ee.Image(images.get(0)), visParams, 'Run1');
// Map.addLayer(ee.Image(images.get(1)), visParams, 'Run2');
// Map.addLayer(ee.Image(images.get(2)), visParams, 'Run 3')
// Map.addLayer(ee.Image(images.get(8)), visParams, 'Run 8')

// Calculate mean of all indivudual model runs
var DistributionMap = ee.ImageCollection.fromImages(images2).mode();

// Add final distribution map and presence locations to the map
Map.addLayer(DistributionMap, 
  {palette: ["white", "green"], min: 0, max: 1}, 
  'Potential distribution');
//Map.addLayer(Data, {color:'red'}, 'Presence', 1);



// Var importance
var VarImportance = ee.List.sequence(2,ee.Number(numiter).multiply(3).subtract(1),3).map(function(x){
                      return results.get(x)});
var Var_Imp = ee.FeatureCollection(VarImportance);

var Variable_Imp = ee.List(Var_Imp.reduceColumns({
  reducer: ee.Reducer.mean().repeat(ee.List(bands).length()),
  selectors: bands
}).get('mean'));

var Variable_ImpSD = ee.List(Var_Imp.reduceColumns({
  reducer: ee.Reducer.stdDev().repeat(ee.List(bands).length()),
  selectors: bands
}).get('stdDev'));


Export.table.toDrive({
  collection: ee.FeatureCollection(ee.List.sequence(0,ee.List(bands).length().subtract(1))
                 .map(function(element){
                  return ee.Feature(null,{Band: ee.List(bands).get(element), 
                  Variable_ImpSD: Variable_ImpSD.get(element)})})),
  folder: 'GIS',
  description: 'Variable_ImpSD',
  fileFormat: 'CSV'
});


// Section 7 - Accuracy assessment
/////////////////////////////////////

// Extract testing/validation data sets
var TestingDatasets = ee.List.sequence(3,ee.Number(numiter).multiply(4).subtract(1),4).map(function(x){
                      return results.get(x)});

// Double check that you have a satisfactory number of points for model validation
print('Number of presence and pseudo-absence points for model validation', ee.List.sequence(0,ee.Number(numiter).subtract(1),1)
.map(function(x){
  return ee.List([ee.FeatureCollection(TestingDatasets.get(x)).filter(ee.Filter.eq('PresAbs',1)).size(),
         ee.FeatureCollection(TestingDatasets.get(x)).filter(ee.Filter.eq('PresAbs',0)).size()]);
})
);

// Define functions to estimate sensitivity, specificity and precision at different thresholds.
function getAcc(img,TP){
  var Pr_Prob_Vals = img.sampleRegions({collection: TP, properties: ['PresAbs'], scale: GrainSize, tileScale: 16});
  var seq = ee.List.sequence({start: 0, end: 1, count: 25});
  return ee.FeatureCollection(seq.map(function(cutoff) {
  var Pres = Pr_Prob_Vals.filterMetadata('PresAbs','equals',1);
  // true-positive and true-positive rate, sensitivity  
  var TP =  ee.Number(Pres.filterMetadata('classification','greater_than',cutoff).size());
  var TPR = TP.divide(Pres.size());
  var Abs = Pr_Prob_Vals.filterMetadata('PresAbs','equals',0);
  // false-negative
  var FN = ee.Number(Pres.filterMetadata('classification','less_than',cutoff).size());
  // true-negative and true-negative rate, specificity  
  var TN = ee.Number(Abs.filterMetadata('classification','less_than',cutoff).size());
  var TNR = TN.divide(Abs.size());
  // false-positive and false-positive rate
  var FP = ee.Number(Abs.filterMetadata('classification','greater_than',cutoff).size());
  var FPR = FP.divide(Abs.size());
  // precision
  var Precision = TP.divide(TP.add(FP));
  // sum of sensitivity and specificity
  var SUMSS = TPR.add(TNR);
  return ee.Feature(null,{cutoff: cutoff, TP:TP, TN:TN, FP:FP, FN:FN, TPR:TPR, TNR:TNR, FPR:FPR, Precision:Precision, SUMSS:SUMSS});
  }));
}

// Calculate AUC of the Receiver Operator Characteristic
function getAUCROC(x){
var X = ee.Array(x.aggregate_array('FPR'));
var Y = ee.Array(x.aggregate_array('TPR')); 
  var X1 = X.slice(0,1).subtract(X.slice(0,0,-1));
  var Y1 = Y.slice(0,1).add(Y.slice(0,0,-1));
  return X1.multiply(Y1).multiply(0.5).reduce('sum',[0]).abs().toList().get(0);
}

function AUCROCaccuracy(x){
  var HSM = ee.Image(images.get(x));
  var TData = ee.FeatureCollection(TestingDatasets.get(x));
var Acc = getAcc(HSM, TData);
  return getAUCROC(Acc);
}


var AUCROCs = ee.List.sequence(0,ee.Number(numiter).subtract(1),1).map(AUCROCaccuracy);
//print('AUC-ROC:', AUCROCs);
//print('Mean AUC-ROC', AUCROCs.reduce(ee.Reducer.mean()));


 //Calculate AUC of Precision Recall Curve
function getAUCPR(roc){
  var X = ee.Array(roc.aggregate_array('TPR'));
  var Y = ee.Array(roc.aggregate_array('Precision')); 
 var X1 = X.slice(0,1).subtract(X.slice(0,0,-1));
  var Y1 = Y.slice(0,1).add(Y.slice(0,0,-1));
 return X1.multiply(Y1).multiply(0.5).reduce('sum',[0]).abs().toList().get(0);
}

function AUCPRaccuracy(x){
  var HSM = ee.Image(images.get(x));
  var TData = ee.FeatureCollection(TestingDatasets.get(x));
  var Acc = getAcc(HSM, TData);
  return getAUCPR(Acc);
}

var AUCPRs = ee.List.sequence(0,ee.Number(numiter).subtract(1),1).map(AUCPRaccuracy);
//print('AUC-PR:', AUCPRs);
//print('Mean AUC-PR', AUCPRs.reduce(ee.Reducer.mean()));

// Function to extract other metrics
function getMetrics(x){
  var HSM = ee.Image(images.get(x));
  var TData = ee.FeatureCollection(TestingDatasets.get(x));
  var Acc = getAcc(HSM, TData);
  return Acc.sort({property:'SUMSS',ascending:false}).first();
}

// Extract sensitivity, specificity and mean threshold values
var Metrics = ee.List.sequence(0,ee.Number(numiter).subtract(1),1).map(getMetrics);
//print('Sensitivity:', ee.FeatureCollection(Metrics).aggregate_array("TPR"));
//print('Specificity:', ee.FeatureCollection(Metrics).aggregate_array("TNR"));

var MeanThresh = ee.Number(ee.FeatureCollection(Metrics).aggregate_array("cutoff").reduce(ee.Reducer.mean()));
//print('Mean threshold:', MeanThresh);

// Export.table.toDrive({
//   collection: ee.FeatureCollection(MeanThresh),
//   description: 'MeanThresh',
//   fileFormat: 'CSV',
// });

// Var importance
var VarImportance = ee.List.sequence(2,ee.Number(numiter).multiply(3).subtract(1),3).map(function(x){
                      return results.get(x)});
var Var_Imp = ee.FeatureCollection(VarImportance);

var Variable_Imp = ee.List(Var_Imp.reduceColumns({
  reducer: ee.Reducer.mean().repeat(ee.List(bands).length()),
  selectors: bands
}).get('mean'));

print(Variable_Imp)

Export.table.toDrive({
  collection: ee.FeatureCollection(Variable_Imp
  .map(function(element){return ee.Feature(null,{Variable_Imp:element})})),
  description: 'Variable_Imp',
  fileFormat: 'CSV',
});

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Section 8 - Create a custom binary distribution map based on best threshold
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Calculating the potential distribution map based on the threshold 
// that maximizes the sum of sensitivity and specificity is computationally intensive and
// for large number of iterations may need to be executed using batch mode.
// In batch mode, the final image needs to exported to Google Drive and opened in 
// another software for visualization (or imported to GEE as an asset for visualization.

// Transform probability model output into a binary map using the defined threshold and set NA into -9999
var DistributionMap2 = ModelAverage.gte(MeanThresh);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Section 9 - Export outputs
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Export final model predictions to drive

//Averaged habitat suitability
Export.image.toDrive({
  image: ModelAverage, //Object to export
  description: 'HSI', //Name of the file
  scale: GrainSize, //Spatial resolution of the exported raster
  maxPixels: 1e10,
  region: AOI //Area of interest
});

// // Export final binary model based on a majority vote
Export.image.toDrive({
  image: DistributionMap, //Object to export
  description: 'PotentialDistribution', //Name of the file
  scale: GrainSize, //Spatial resolution of the exported raster
  maxPixels: 1e10,
  region: AOI //Area of interest
});



Export.image.toDrive({
  image: ModelSD, 
  description: 'Suitability SD', //Name of the file
  scale: GrainSize, //Spatial resolution of the exported raster
  maxPixels: 1e10,
  region: AOI });

// Export final binary model based on the threshold that maximises the sum of specificity and sensitivity
// Export.image.toDrive({
//   image: DistributionMap2.unmask(-9999),
//   description: 'PotentialDistributionThreshold',
//   scale: GrainSize,
//   maxPixels: 1e10,
//   region: AOI
// });


// Export Accuracy Assessment Metrics

// Export.table.toDrive({
//   collection: ee.FeatureCollection(AUCROCs
//                         .map(function(element){
//                         return ee.Feature(null,{AUCROC:element})})),
//   description: 'AUCROC',
//   fileFormat: 'CSV',
// });

Export.table.toDrive({
  collection: ee.FeatureCollection(AUCPRs
  .map(function(element){return ee.Feature(null,{AUCPR:element})})),
  description: 'AUCPR',
  fileFormat: 'CSV',
});

Export.table.toDrive({
  collection: ee.FeatureCollection(Metrics),
  description: 'Metrics',
  fileFormat: 'CSV',
});

// Export training and validation data sets

// Extract training datasets
var TrainingDatasets = ee.List.sequence(1,ee.Number(numiter).multiply(4).subtract(1),4).map(function(x){
  return results.get(x)});

// If you are interested in exporting any of the training or testing datasets used for modeling,
// you need to extract the feature collections from the SDM output list and export them.

/*
Export.table.toDrive({
  collection: TrainingDatasets.get(0),
  description: 'TestingDataRun1',
  fileFormat: 'CSV',
});

Export.table.toDrive({
  collection: TestingDatasets.get(0),
  description: 'TestingDataRun1',
  fileFormat: 'CSV',
});





/*
*/









